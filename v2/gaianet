#!/bin/bash

# path to the default gaianet base directory. It could be changed by the --base option
gaianet_base_dir="$HOME/gaianet"

# We will make sure that the path is setup in case the user runs gaianet immediately after init
source $HOME/.wasmedge/env

check_base_dir() {
    # Check if $gaianet_base_dir directory exists
    if [ ! -d $gaianet_base_dir ]; then
        printf "\n[Error] Not found $gaianet_base_dir.\n\nPlease run 'bash install.sh' command first, then try again.\n\n"
        exit 1
    fi

    log_dir=$gaianet_base_dir/log
}

# create or recover a qdrant collection
create_collection() {
    printf "[+] Creating 'default' collection in the Qdrant instance ...\n"

    qdrant_pid=0
    qdrant_already_running=false
    if [ "$(uname)" == "Darwin" ] || [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        if lsof -Pi :6333 -sTCP:LISTEN -t >/dev/null ; then
            printf "    * A Qdrant instance is already running ...\n"
            qdrant_already_running=true
        fi
        printf "\n"
    elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
        printf "For Windows users, please run this script in WSL.\n"
        exit 1
    else
        printf "Only support Linux, MacOS and Windows.\n"
        exit 1
    fi

    if [ "$qdrant_already_running" = false ]; then
        printf "    * Start a Qdrant instance ...\n\n"
        # start qdrant
        cd $gaianet_base_dir/qdrant

        # check if `log` directory exists or not
        if [ ! -d "$gaianet_base_dir/log" ]; then
            mkdir -p $gaianet_base_dir/log
        fi
        log_dir=$gaianet_base_dir/log

        nohup $gaianet_base_dir/bin/qdrant > $log_dir/init-qdrant.log 2>&1 &
        sleep 5
        qdrant_pid=$!
    fi

    cd $gaianet_base_dir
    url_snapshot=$(awk -F'"' '/"snapshot":/ {print $4}' config.json)
    url_document=$(awk -F'"' '/"document":/ {print $4}' config.json)
    embedding_collection_name=$(awk -F'"' '/"embedding_collection_name":/ {print $4}' config.json)
    if [[ -z "$embedding_collection_name" ]]; then
        embedding_collection_name="default"
    fi

    printf "    * Remove the existed 'default' Qdrant collection ...\n\n"
    cd $gaianet_base_dir
    # remove the collection if it exists
    del_response=$(curl -s -X DELETE http://localhost:6333/collections/$embedding_collection_name \
        -H "Content-Type: application/json")
    status=$(echo "$del_response" | grep -o '"status":"[^"]*"' | cut -d':' -f2 | tr -d '"')
    if [ "$status" != "ok" ]; then
        printf "      [Error] Failed to remove the $embedding_collection_name collection. $del_response\n\n"

        if [ "$qdrant_already_running" = false ]; then
            kill $qdrant_pid
        fi

        exit 1
    fi

    # 10.1 recover from the given qdrant collection snapshot
    if [ -n "$url_snapshot" ]; then
        printf "    * Download Qdrant collection snapshot ...\n"
        curl --progress-bar -L $url_snapshot -o default.snapshot
        printf "\n"

        printf "    * Import the Qdrant collection snapshot ...\n\n"
        # Import the default.snapshot file
        response=$(curl -s -X POST http://localhost:6333/collections/$embedding_collection_name/snapshots/upload?priority=snapshot \
            -H 'Content-Type:multipart/form-data' \
            -F 'snapshot=@default.snapshot')
        sleep 5

        if echo "$response" | grep -q '"status":"ok"'; then
            rm $gaianet_base_dir/default.snapshot
            printf "    * Recovery is done successfully\n"
        else
            printf "    * [Error] Failed to recover from the collection snapshot. $response \n"

            if [ "$qdrant_already_running" = false ]; then
                kill $qdrant_pid
            fi

            exit 1
        fi

    # 10.2 generate a Qdrant collection from the given document
    elif [ -n "$url_document" ]; then
        printf "    * Create 'default' Qdrant collection from the given document ...\n\n"

        # Start LlamaEdge API Server
        printf "    * Start LlamaEdge-RAG API Server ...\n\n"

        # parse cli options for chat model
        cd $gaianet_base_dir
        url_chat_model=$(awk -F'"' '/"chat":/ {print $4}' config.json)
        # gguf filename
        chat_model_name=$(basename $url_chat_model)
        # stem part of the filename
        chat_model_stem=$(basename "$chat_model_name" .gguf)
        # parse context size for chat model
        chat_ctx_size=$(awk -F'"' '/"chat_ctx_size":/ {print $4}' config.json)
        # parse prompt type for chat model
        prompt_type=$(awk -F'"' '/"prompt_template":/ {print $4}' config.json)
        # parse reverse prompt for chat model
        reverse_prompt=$(awk -F'"' '/"reverse_prompt":/ {print $4}' config.json)
        # parse cli options for embedding model
        url_embedding_model=$(awk -F'"' '/"embedding":/ {print $4}' config.json)
        # gguf filename
        embedding_model_name=$(basename $url_embedding_model)
        # stem part of the filename
        embedding_model_stem=$(basename "$embedding_model_name" .gguf)
        # parse context size for embedding model
        embedding_ctx_size=$(awk -F'"' '/"embedding_ctx_size":/ {print $4}' config.json)
        # parse cli options for embedding vector collection name
        embedding_collection_name=$(awk -F'"' '/"embedding_collection_name":/ {print $4}' config.json)
        if [[ -z "$embedding_collection_name" ]]; then
            embedding_collection_name="default"
        fi
        # parse port for LlamaEdge API Server
        llamaedge_port=$(awk -F'"' '/"llamaedge_port":/ {print $4}' config.json)

        if [ "$(uname)" == "Darwin" ] || [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
            if lsof -Pi :$llamaedge_port -sTCP:LISTEN -t >/dev/null ; then
                printf "It appears that the GaiaNet node is running. Please stop it first.\n\n"

                if [ "$qdrant_already_running" = false ]; then
                    kill $qdrant_pid
                fi

                exit 1
            fi
        elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
            printf "For Windows users, please run this script in WSL.\n"

            if [ "$qdrant_already_running" = false ]; then
                kill $qdrant_pid
            fi

            exit 1
        else
            printf "Only support Linux, MacOS and Windows.\n"

            if [ "$qdrant_already_running" = false ]; then
                kill $qdrant_pid
            fi

            exit 1
        fi

        # command to start LlamaEdge API Server
        cd $gaianet_base_dir
        cmd="wasmedge --dir .:. \
        --nn-preload default:GGML:AUTO:$chat_model_name \
        --nn-preload embedding:GGML:AUTO:$embedding_model_name \
        rag-api-server.wasm -p $prompt_type \
        --model-name $chat_model_stem,$embedding_model_stem \
        --ctx-size $chat_ctx_size,$embedding_ctx_size \
        --qdrant-collection-name $embedding_collection_name \
        --web-ui ./dashboard \
        --socket-addr 0.0.0.0:$llamaedge_port \
        --log-prompts \
        --log-stat"

        # printf "    Run the following command to start the LlamaEdge API Server:\n\n"
        # printf "    %s\n\n" "$cmd"

        nohup $cmd > $log_dir/init-qdrant-gen-collection.log 2>&1 &
        sleep 5
        llamaedge_pid=$!
        echo $llamaedge_pid > $gaianet_base_dir/llamaedge.pid

        printf "    * Convert document to embeddings ...\n"
        printf "      The process may take a few minutes. Please wait ...\n\n"
        cd $gaianet_base_dir
        doc_filename=$(basename $url_document)
        curl -s $url_document -o $doc_filename

        if [[ $doc_filename != *.txt ]] && [[ $doc_filename != *.md ]]; then
            printf "Error: the document to upload should be a file with 'txt' or 'md' extension.\n"

            # stop the api-server
            if [ -f "$gaianet_base_dir/llamaedge.pid" ]; then
                # printf "[+] Stopping API server ...\n"
                kill $(cat $gaianet_base_dir/llamaedge.pid)
                rm $gaianet_base_dir/llamaedge.pid
            fi

            if [ "$qdrant_already_running" = false ]; then
                kill $qdrant_pid
            fi

            exit 1
        fi

        # compute embeddings
        embedding_response=$(curl -s -X POST http://127.0.0.1:$llamaedge_port/v1/create/rag -F "file=@$doc_filename")

        # remove the downloaded document
        rm -f $gaianet_base_dir/$doc_filename

        # stop the api-server
        if [ -f "$gaianet_base_dir/llamaedge.pid" ]; then
            # stop API server
            kill $(cat $gaianet_base_dir/llamaedge.pid)
            rm $gaianet_base_dir/llamaedge.pid
        fi

        if [ -z "$embedding_response" ]; then
            printf "    * [Error] Failed to compute embeddings. Exit ...\n"

            if [ "$qdrant_already_running" = false ]; then
                kill $qdrant_pid
            fi

            exit 1
        else
            printf "    * Embeddings are computed successfully\n"
        fi

    else
        echo "Please set 'snapshot' or 'document' field in config.json"
    fi
    printf "\n"

    if [ "$qdrant_already_running" = false ]; then
        # stop qdrant
        kill $qdrant_pid
    fi

}

init() {
    # download GGUF chat model file to $gaianet_base_dir
    url_chat_model=$(awk -F'"' '/"chat":/ {print $4}' $gaianet_base_dir/config.json)
    chat_model=$(basename $url_chat_model)
    if [ -f "$gaianet_base_dir/$chat_model" ]; then
        printf "[+] Using the cached chat model: $chat_model\n"
    else
        printf "[+] Downloading $chat_model ...\n"
        curl --retry 3 --progress-bar -L $url_chat_model -o $gaianet_base_dir/$chat_model
    fi
    printf "\n"

    # download GGUF embedding model file to $gaianet_base_dir
    url_embedding_model=$(awk -F'"' '/"embedding":/ {print $4}' $gaianet_base_dir/config.json)
    embedding_model=$(basename $url_embedding_model)
    if [ -f "$gaianet_base_dir/$embedding_model" ]; then
        printf "[+] Using the cached embedding model: $embedding_model\n"
    else
        printf "[+] Downloading $embedding_model ...\n\n"
        curl --retry 3 --progress-bar -L $url_embedding_model -o $gaianet_base_dir/$embedding_model
    fi
    printf "\n"

    # create or recover a qdrant collection
    create_collection

    # Copy config to dashboard
    if [ ! -f "$gaianet_base_dir/registry.wasm" ] ; then
        printf "[+] Downloading the registry.wasm ...\n"
        curl -s -L https://github.com/GaiaNet-AI/gaianet-node/raw/main/utils/registry/registry.wasm -o $gaianet_base_dir/registry.wasm
        printf "\n"
    fi
    printf "[+] Preparing the dashboard ...\n"
    cd $gaianet_base_dir
    wasmedge --dir .:. registry.wasm
    printf "\n"
}

# * config subcommand
update_config() {
    key=$1
    new_value=$2
    file=$gaianet_base_dir/config.json
    bak=$gaianet_base_dir/config.json.bak
    # update in place
    sed -i.bak -e "/\"$key\":/ s#: \".*\"#: \"$new_value\"#" $file
    # remove backup file
    rm $bak
}

# * start subcommand

# start rag-api-server and a qdrant instance
start() {
    local_only=$1

    # check if config.json exists or not
    if [ ! -f "$gaianet_base_dir/config.json" ]; then
        printf "config.json file not found in $gaianet_base_dir\n"
        exit 1
    fi

    # check if supervise is installed or not
    use_supervise=true
    if ! command -v supervise &> /dev/null; then
        use_supervise=false
    fi

    # 1. start a Qdrant instance
    printf "[+] Starting Qdrant instance ...\n"

    qdrant_already_running=false
    if [ "$(uname)" == "Darwin" ] || [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        if lsof -Pi :6333 -sTCP:LISTEN -t >/dev/null ; then
            qdrant_already_running=true
        fi
    elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
        printf "For Windows users, please run this script in WSL.\n"
        exit 1
    else
        printf "Only support Linux, MacOS and Windows.\n"
        exit 1
    fi

    if [ "$qdrant_already_running" = false ]; then
        qdrant_executable="$gaianet_base_dir/bin/qdrant"
        if [ -f "$qdrant_executable" ]; then
            cd $gaianet_base_dir/qdrant
            nohup $qdrant_executable > $log_dir/start-qdrant.log 2>&1 &
            sleep 2
            qdrant_pid=$!
            echo $qdrant_pid > $gaianet_base_dir/qdrant.pid
            printf "\n    Qdrant instance started with pid: $qdrant_pid\n\n"
        else
            printf "Qdrant binary not found at $qdrant_executable\n\n"
            exit 1
        fi
    fi

    # 2. start a LlamaEdge instance
    printf "[+] Starting LlamaEdge API Server ...\n\n"

    # We will make sure that the path is setup in case the user runs start.sh immediately after init.sh
    source $HOME/.wasmedge/env

    # parse cli options for chat model
    cd $gaianet_base_dir
    url_chat_model=$(awk -F'"' '/"chat":/ {print $4}' config.json)
    # gguf filename
    chat_model_name=$(basename $url_chat_model)
    # stem part of the filename
    chat_model_stem=$(basename "$chat_model_name" .gguf)
    # parse context size for chat model
    chat_ctx_size=$(awk -F'"' '/"chat_ctx_size":/ {print $4}' config.json)
    # parse prompt type for chat model
    prompt_type=$(awk -F'"' '/"prompt_template":/ {print $4}' config.json)
    # parse system prompt for chat model
    rag_prompt=$(awk -F'"' '/"rag_prompt":/ {print $4}' config.json)
    # parse reverse prompt for chat model
    reverse_prompt=$(awk -F'"' '/"reverse_prompt":/ {print $4}' config.json)
    # parse cli options for embedding model
    url_embedding_model=$(awk -F'"' '/"embedding":/ {print $4}' config.json)
    # parse cli options for embedding vector collection name
    embedding_collection_name=$(awk -F'"' '/"embedding_collection_name":/ {print $4}' config.json)
    if [[ -z "$embedding_collection_name" ]]; then
        embedding_collection_name="default"
    fi
    # gguf filename
    embedding_model_name=$(basename $url_embedding_model)
    # stem part of the filename
    embedding_model_stem=$(basename "$embedding_model_name" .gguf)
    # parse context size for embedding model
    embedding_ctx_size=$(awk -F'"' '/"embedding_ctx_size":/ {print $4}' config.json)
    # parse port for LlamaEdge API Server
    llamaedge_port=$(awk -F'"' '/"llamaedge_port":/ {print $4}' config.json)

    if [ "$(uname)" == "Darwin" ] || [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        if lsof -Pi :$llamaedge_port -sTCP:LISTEN -t >/dev/null ; then
            printf "    Port $llamaedge_port is in use. Exit ...\n\n"

            # stop the qdrant instance
            if [ "$qdrant_already_running" = false ]; then

                # stop the Qdrant instance
                qdrant_pid=$gaianet_base_dir/qdrant.pid
                if [ -f $qdrant_pid ]; then
                    printf "    Stopping Qdrant instance ...\n"
                    kill -9 $(cat $qdrant_pid)
                    rm $qdrant_pid
                fi

            fi

            exit 1
        fi
    elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
        printf "For Windows users, please run this script in WSL.\n"
        exit 1
    else
        printf "Only support Linux, MacOS and Windows.\n"
        exit 1
    fi

    cd $gaianet_base_dir
    llamaedge_wasm="$gaianet_base_dir/rag-api-server.wasm"
    if [ ! -f "$llamaedge_wasm" ]; then
        printf "LlamaEdge wasm not found at $llamaedge_wasm\n"
        exit 1
    fi

    # command to start LlamaEdge API Server
    cd $gaianet_base_dir
    cmd=(wasmedge --dir .:./dashboard \
    --nn-preload default:GGML:AUTO:$chat_model_name \
    --nn-preload embedding:GGML:AUTO:$embedding_model_name \
    rag-api-server.wasm \
    --model-name $chat_model_stem,$embedding_model_stem \
    --ctx-size $chat_ctx_size,$embedding_ctx_size \
    --prompt-template $prompt_type \
    --qdrant-collection-name $embedding_collection_name \
    --web-ui ./ \
    --socket-addr 0.0.0.0:$llamaedge_port \
    --log-prompts \
    --log-stat)

    # Add system prompt if it exists
    if [ -n "$rag_prompt" ]; then
        cmd+=("--rag-prompt" "$rag_prompt")
    fi

    # Add reverse prompt if it exists
    if [ -n "$reverse_prompt" ]; then
        cmd+=("--reverse_prompt" "$reverse_prompt")
    fi

    printf "    Run the following command to start the LlamaEdge API Server:\n\n"
    for i in "${cmd[@]}"; do
        if [[ $i == *" "* ]]; then
            printf "\"%s\" " "$i"
        else
            printf "%s " "$i"
        fi
    done
    printf "\n\n"

    if $use_supervise; then
        cmd_string=""
        for i in "${cmd[@]}"; do
            if [[ $i == *" "* ]]; then
                cmd_string+=\""$i"\"
            else
                cmd_string+="$i"
            fi
            cmd_string+=" "
        done

        # create `run` file for supervise
        echo '#!/bin/bash' > $gaianet_base_dir/run
        echo $cmd_string >> $gaianet_base_dir/run
        chmod u+x $gaianet_base_dir/run

        # start LlamaEdge API Server with supervise
        nohup supervise $gaianet_base_dir > $log_dir/start-llamaedge.log 2>&1 &
        sleep 2
        supervise_pid=$!
        echo $supervise_pid > $gaianet_base_dir/supervise.pid
        printf "\n    Daemotools-Supervise started with pid: $supervise_pid\n"

        # Get the status of the service
        status=$(svstat $gaianet_base_dir)
        # Extract the PID from the status
        llamaedge_pid=$(echo $status | awk '{print $4}' | tr -d ')')
        # The reason of incrementing the PID by 1 is that the PID returned by `svstat` is less 1 than the PID returned by `pgrep`
        llamaedge_pid=$((llamaedge_pid + 1))
        echo $llamaedge_pid > $gaianet_base_dir/llamaedge.pid
        printf "\n    LlamaEdge API Server started with pid: $llamaedge_pid\n\n"

    else
        # start LlamaEdge API Server
        nohup "${cmd[@]}" > $log_dir/start-llamaedge.log 2>&1 &
        sleep 2
        llamaedge_pid=$!
        echo $llamaedge_pid > $gaianet_base_dir/llamaedge.pid
        printf "\n    LlamaEdge API Server started with pid: $llamaedge_pid\n\n"
    fi

    # 3. start gaianet-domain
    if [ "$local_only" -eq 0 ]; then
        # start gaianet-domain
        printf "[+] Starting gaianet-domain ...\n\n"
        nohup $gaianet_base_dir/bin/frpc -c $gaianet_base_dir/gaianet-domain/frpc.toml > $log_dir/start-gaianet-domain.log 2>&1 &
        sleep 2
        gaianet_domain_pid=$!
        echo $gaianet_domain_pid > $gaianet_base_dir/gaianet-domain.pid
        printf "\n    gaianet-domain started with pid: $gaianet_domain_pid\n"

        # Extract the subdomain from frpc.toml
        subdomain=$(grep "subdomain" $gaianet_base_dir/gaianet-domain/frpc.toml | cut -d'=' -f2 | tr -d ' "')
        printf "    The GaiaNet node is started at: https://$subdomain.gaianet.xyz\n\n"
    fi
    if [ "$local_only" -eq 1 ]; then
        printf "    The GaiaNet node is started in local mode at: http://localhost:$llamaedge_port\n\n"
    fi
    printf "\n>>> To stop Qdrant instance and LlamaEdge API Server, run the command: ./stop.sh <<<\n"

    exit 0
}

# * stop subcommand

# stop the Qdrant instance, rag-api-server, and gaianet-domain
stop() {
    # Check if "gaianet" directory exists in $HOME
    if [ ! -d "$gaianet_base_dir" ]; then
        printf "Not found $gaianet_base_dir\n"
        exit 1
    fi

    # stop the Qdrant instance
    qdrant_pid=$gaianet_base_dir/qdrant.pid
    if [ -f $qdrant_pid ]; then
        printf "[+] Stopping Qdrant instance ...\n"
        kill -9 $(cat $qdrant_pid)
        rm $qdrant_pid
    fi

    # stop api-server
    if svok $gaianet_base_dir > /dev/null 2>&1; then
        # stop supervise
        printf "[+] Stopping Daemontools-Supervise ...\n"
        svc -d $gaianet_base_dir
        svc -k $gaianet_base_dir
        svc -x $gaianet_base_dir
        supervise_pid=$gaianet_base_dir/supervise.pid
        if [ -f $supervise_pid ]; then
            # kill -9 $(cat $supervise_pid)
            rm $supervise_pid
        fi
        rm $gaianet_base_dir/run
        rm -rf $gaianet_base_dir/supervise

        # stop api-server
        llamaedge_pid=$gaianet_base_dir/llamaedge.pid
        if [ -f $llamaedge_pid ]; then
            printf "[+] Stopping API server ...\n"
            kill -9 $(cat $llamaedge_pid)
            rm $llamaedge_pid
        fi

    else
        # stop api-server
        llamaedge_pid=$gaianet_base_dir/llamaedge.pid
        if [ -f $llamaedge_pid ]; then
            printf "[+] Stopping API server ...\n"
            kill -9 $(cat $llamaedge_pid)
            rm $llamaedge_pid
        fi
    fi

    # stop gaianet-domain
    gaianet_domain_pid=$gaianet_base_dir/gaianet-domain.pid
    if [ -f $gaianet_domain_pid ]; then
        printf "[+] Stopping gaianet-domain ...\n"
        kill -9 $(cat $gaianet_domain_pid)
        rm $gaianet_domain_pid
    fi

    exit 0
}

# force stop the Qdrant instance, rag-api-server, and gaianet-domain
stop_force() {
    printf "Force stopping WasmEdge, Qdrant and frpc processes ...\n"
    pkill -9 wasmedge
    pkill -9 qdrant
    pkill -9 frpc

    qdrant_pid=$gaianet_base_dir/qdrant.pid
    if [ -f $qdrant_pid ]; then
        rm $qdrant_pid
    fi

    llamaedge_pid=$gaianet_base_dir/llamaedge.pid
    if [ -f $llamaedge_pid ]; then
        rm $llamaedge_pid
    fi

    gaianet_domain_pid=$gaianet_base_dir/gaianet-domain.pid
    if [ -f $gaianet_domain_pid ]; then
        rm $gaianet_domain_pid
    fi

    exit 0
}

# * help option

show_help() {
    printf "Usage: gaianet {config|init|run|stop|OPTIONS} \n\n"
    printf "Subcommands:\n"
    printf "  config             Update the configuration.\n"
    printf "  init               Initialize the GaiaNet node.\n"
    printf "  run|start          Start the GaiaNet node.\n"
    printf "  stop               Stop the GaiaNet node.\n\n"
    printf "Options:\n"
    printf "  --help             Show this help message\n\n"
}

show_config_help() {
    printf "Usage: gaianet config [OPTIONS] \n\n"
    printf "Options:\n"
    printf "  --chat-url <val>           Update the url of chat model.\n"
    printf "  --chat-ctx-size <val>      Update the context size of chat model.\n"
    printf "  --embedding-url <val>      Update the url of embedding model.\n"
    printf "  --embedding-ctx-size <val> Update the context size of embedding model.\n"
    printf "  --prompt-template <val>    Update the prompt template of chat model.\n"
    printf "  --port <val>               Update the port of LlamaEdge API Server.\n"
    printf "  --system-prompt <val>      Update the system prompt.\n"
    printf "  --rag-prompt <val>         Update the rag prompt.\n"
    printf "  --reverse-prompt <val>     Update the reverse prompt.\n"
    printf "  --base <path>              The base directory of GaiaNet.\n"
    printf "  --help                     Show this help message\n\n"
}

show_init_help() {
    printf "Usage: gaianet init [OPTIONS] \n\n"
    printf "Options:\n"
    printf "  --config <val|url>         Name of a pre-defined GaiaNet config or a url. Possible values: default, paris_guide, mua, gaia.\n"
    printf "  --base <path>              The base directory of GaiaNet.\n"
    printf "  --help                     Show this help message\n\n"
}

show_start_help() {
    printf "Usage: gaianet start|run [OPTIONS] \n\n"
    printf "Options:\n"
    printf "  --local-only               Start the program in local mode.\n"
    printf "  --base <path>              The base directory of GaiaNet.\n"
    printf "  --help                     Show this help message\n\n"
}

show_stop_help() {
    printf "Usage: gaianet stop [OPTIONS] \n\n"
    printf "Options:\n"
    printf "  --force                    Force stop the program.\n"
    printf "  --base <path>              The base directory of GaiaNet.\n"
    printf "  --help                     Show this help message\n\n"
}

# * main

subcommand=$1
shift

case $subcommand in
    --help)
        show_help
        ;;
    config)
        chat_ctx_size=""
        chat_url=""
        embedding_ctx_size=""
        embedding_url=""
        prompt_template=""
        port=""
        system_prompt=""
        rag_prompt=""
        reverse_prompt=""

        while (( "$#" )); do
            case "$1" in
                --chat-url)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        chat_url=$2
                        shift 2
                    fi
                    ;;
                --chat-ctx-size)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        chat_ctx_size=$2
                        shift 2
                    fi
                    ;;
                --embedding-url)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        embedding_url=$2
                        shift 2
                    fi
                    ;;
                --embedding-ctx-size)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        embedding_ctx_size=$2
                        shift 2
                    fi
                    ;;
                --prompt-template)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        prompt_template=$2
                        shift 2
                    fi
                    ;;
                --port)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        port=$2
                        shift 2
                    fi
                    ;;
                --system-prompt)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        system_prompt=$2
                        shift 2
                    fi
                    ;;
                --rag-prompt)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        rag_prompt=$2
                        shift 2
                    fi
                    ;;
                --reverse-prompt)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        reverse_prompt=$2
                        shift 2
                    fi
                    ;;
                --base)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        gaianet_base_dir=$2
                        shift 2
                        check_base_dir
                    fi
                    ;;
                *)
                    show_config_help
                    exit 1
                    ;;
            esac
        done

        # update url of chat model
        if [ -n "$chat_url" ]; then
            echo "set chat url"
            # update
            update_config chat $chat_url
        fi

        # update context size of chat model
        if [ -n "$chat_ctx_size" ]; then
            echo "set ctx size"
            # update
            update_config chat_ctx_size $chat_ctx_size
        fi

        # update url of embedding model
        if [ -n "$embedding_url" ]; then
            echo "set embedding url"
            # update
            update_config embedding $embedding_url
        fi

        # update context size of embedding model
        if [ -n "$embedding_ctx_size" ]; then
            echo "set embedding ctx size"
            # update
            update_config embedding_ctx_size $embedding_ctx_size
        fi

        # update prompt template
        if [ -n "$prompt_template" ]; then
            echo "set prompt template"
            # update
            update_config prompt_template $prompt_template
        fi

        # update port
        if [ -n "$port" ]; then
            echo "set port"
            # update
            update_config llamaedge_port $port
        fi

        # update system prompt
        if [ -n "$system_prompt" ]; then
            echo "set system prompt"
            # The new value for system_prompt
            new_value="$system_prompt"

            # Escape ampersands and backslashes in the new value
            new_value_escaped=$(echo "$new_value" | sed 's/[&\\/]/\\&/g')

            # Update the value of system_prompt in config.json
            sed -i '' "s|\"system_prompt\": \".*\"|\"system_prompt\": \"$new_value_escaped\"|" $gaianet_base_dir/config.json
        fi

        # update rag prompt
        if [ -n "$rag_prompt" ]; then
            echo "set rag prompt"
            # The new value for rag_prompt
            new_value="$rag_prompt"

            # Escape ampersands and backslashes in the new value
            new_value_escaped=$(echo "$new_value" | sed 's/[&\\/]/\\&/g')

            # Update the value of rag_prompt in config.json
            sed -i '' "s|\"rag_prompt\": \".*\"|\"rag_prompt\": \"$new_value_escaped\"|" $gaianet_base_dir/config.json
        fi

        ;;

    init)
        config=""

        while (( "$#" )); do
            case "$1" in
                --config)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        config=$2
                        shift 2
                    fi
                    ;;
                --base)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        gaianet_base_dir=$2
                        shift 2
                        check_base_dir
                    fi
                    ;;
                *)
                    show_init_help
                    exit 1
                    ;;
            esac
        done

        case $config in
            "")
                init
                ;;
            paris_guide)
                init
                ;;
            mua)
                printf "[+] Downloading config.json ...\n"
                config_url="https://raw.githubusercontent.com/alabulei1/test-ports/main/mua/config.json"
                printf "    Url: $config_url"
                curl --retry 3 --progress-bar -L $config_url -o $gaianet_base_dir/config.json

                # init
                init
                ;;
            gaia)
                printf "[+] Downloading config.json ...\n"
                config_url="https://raw.githubusercontent.com/alabulei1/test-ports/main/gaianet/config.json"
                printf "    Url: $config_url"
                curl --retry 3 --progress-bar -L $config_url -o $gaianet_base_dir/config.json

                # init
                init
                ;;
            *)
                # if config is a url
                if [[ $config == http* ]]; then
                    printf "[+] Downloading config.json ...\n"
                    printf "    Url: $arg\n"
                    curl --retry 3 --progress-bar -L $arg -o $gaianet_base_dir/config.json

                    # init
                    init
                else
                    show_init_help
                    exit 1
                fi
                ;;
        esac

        ;;
    run|start)
        local=0

        while (( "$#" )); do
            case "$1" in
                --local-only)
                    local=1
                    shift
                    ;;
                --base)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        gaianet_base_dir=$2
                        shift 2
                        check_base_dir
                    fi
                    ;;
                *)
                    show_start_help
                    exit 1
                    ;;
            esac
        done

        start $local

        ;;

    stop)
        force=0

        while (( "$#" )); do
            case "$1" in
                --force)
                    force=1
                    shift
                    ;;
                --base)
                    if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                        gaianet_base_dir=$2
                        shift 2
                        check_base_dir
                    fi
                    ;;
                *)
                    show_stop_help
                    exit 1
                    ;;
            esac
        done

        if [ $force -eq 1 ]; then
            stop_force
        else
            stop
        fi

        ;;
    *)
        show_help
        exit 1
esac

